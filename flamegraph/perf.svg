<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="310.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="293" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="293" > </text>
<g id="frames">
<g >
<title>__GI__IO_file_overflow (98,093 samples, 1.71%)</title><rect x="456.0" y="85" width="20.1" height="15.0" fill="rgb(244,159,22)" rx="2" ry="2" />
<text  x="458.98" y="95.5" ></text>
</g>
<g >
<title>dl_main (1,839,595 samples, 32.04%)</title><rect x="759.4" y="165" width="378.0" height="15.0" fill="rgb(220,164,2)" rx="2" ry="2" />
<text  x="762.35" y="175.5" >dl_main</text>
</g>
<g >
<title>_dl_map_object_deps (140,766 samples, 2.45%)</title><rect x="759.4" y="149" width="28.9" height="15.0" fill="rgb(239,138,43)" rx="2" ry="2" />
<text  x="762.35" y="159.5" >_d..</text>
</g>
<g >
<title>elf_get_dynamic_info (9,906 samples, 0.17%)</title><rect x="1153.0" y="197" width="2.1" height="15.0" fill="rgb(209,24,2)" rx="2" ry="2" />
<text  x="1156.04" y="207.5" ></text>
</g>
<g >
<title>Rsqf::block2string[abi:cxx11] (767,265 samples, 13.36%)</title><rect x="542.6" y="149" width="157.7" height="15.0" fill="rgb(222,23,50)" rx="2" ry="2" />
<text  x="545.62" y="159.5" >Rsqf::block2string[a..</text>
</g>
<g >
<title>__GI_fwrite (82,321 samples, 1.43%)</title><rect x="439.1" y="101" width="16.9" height="15.0" fill="rgb(253,52,13)" rx="2" ry="2" />
<text  x="442.06" y="111.5" ></text>
</g>
<g >
<title>[libc.so.6] (86,366 samples, 1.50%)</title><rect x="10.0" y="229" width="17.7" height="15.0" fill="rgb(207,206,23)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>_IO_new_file_write (337,480 samples, 5.88%)</title><rect x="27.7" y="213" width="69.4" height="15.0" fill="rgb(254,225,12)" rx="2" ry="2" />
<text  x="30.75" y="223.5" >_IO_new..</text>
</g>
<g >
<title>std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; &gt; (555,119 samples, 9.67%)</title><rect x="573.1" y="133" width="114.1" height="15.0" fill="rgb(238,155,1)" rx="2" ry="2" />
<text  x="576.11" y="143.5" >std::operator&lt;..</text>
</g>
<g >
<title>std::ostream::put (343,443 samples, 5.98%)</title><rect x="616.6" y="117" width="70.6" height="15.0" fill="rgb(237,226,23)" rx="2" ry="2" />
<text  x="619.61" y="127.5" >std::os..</text>
</g>
<g >
<title>new_do_write (103,230 samples, 1.80%)</title><rect x="700.3" y="69" width="21.2" height="15.0" fill="rgb(237,160,28)" rx="2" ry="2" />
<text  x="703.28" y="79.5" ></text>
</g>
<g >
<title>all (5,742,440 samples, 100%)</title><rect x="10.0" y="261" width="1180.0" height="15.0" fill="rgb(242,111,23)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>main (2,815,522 samples, 49.03%)</title><rect x="174.6" y="181" width="578.6" height="15.0" fill="rgb(218,9,1)" rx="2" ry="2" />
<text  x="177.60" y="191.5" >main</text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (256,889 samples, 4.47%)</title><rect x="254.9" y="85" width="52.8" height="15.0" fill="rgb(230,228,35)" rx="2" ry="2" />
<text  x="257.93" y="95.5" >std::..</text>
</g>
<g >
<title>_dl_new_hash (1,118,740 samples, 19.48%)</title><rect x="818.2" y="69" width="229.9" height="15.0" fill="rgb(209,12,6)" rx="2" ry="2" />
<text  x="821.23" y="79.5" >_dl_new_hash</text>
</g>
<g >
<title>do_lookup_x (434,326 samples, 7.56%)</title><rect x="1048.1" y="69" width="89.3" height="15.0" fill="rgb(245,46,22)" rx="2" ry="2" />
<text  x="1051.12" y="79.5" >do_lookup_x</text>
</g>
<g >
<title>__GI__IO_file_overflow (103,230 samples, 1.80%)</title><rect x="700.3" y="101" width="21.2" height="15.0" fill="rgb(212,71,4)" rx="2" ry="2" />
<text  x="703.28" y="111.5" ></text>
</g>
<g >
<title>std::ostream::operator&lt;&lt; (257,317 samples, 4.48%)</title><rect x="700.3" y="149" width="52.9" height="15.0" fill="rgb(209,168,17)" rx="2" ry="2" />
<text  x="703.28" y="159.5" >std::..</text>
</g>
<g >
<title>mask_left (308,291 samples, 5.37%)</title><rect x="307.7" y="117" width="63.4" height="15.0" fill="rgb(212,126,53)" rx="2" ry="2" />
<text  x="310.71" y="127.5" >mask_l..</text>
</g>
<g >
<title>std::ostream::flush (212,632 samples, 3.70%)</title><rect x="174.6" y="69" width="43.7" height="15.0" fill="rgb(224,28,16)" rx="2" ry="2" />
<text  x="177.60" y="79.5" >std:..</text>
</g>
<g >
<title>std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; &gt; (82,321 samples, 1.43%)</title><rect x="439.1" y="133" width="16.9" height="15.0" fill="rgb(250,144,41)" rx="2" ry="2" />
<text  x="442.06" y="143.5" ></text>
</g>
<g >
<title>std::ostream::_M_insert&lt;unsigned long&gt; (169,965 samples, 2.96%)</title><rect x="1155.1" y="229" width="34.9" height="15.0" fill="rgb(210,59,22)" rx="2" ry="2" />
<text  x="1158.07" y="239.5" >st..</text>
</g>
<g >
<title>Rsqf::first_unused_slot (647,791 samples, 11.28%)</title><rect x="174.6" y="133" width="133.1" height="15.0" fill="rgb(226,83,39)" rx="2" ry="2" />
<text  x="177.60" y="143.5" >Rsqf::first_unus..</text>
</g>
<g >
<title>__GI_fwrite (212,632 samples, 3.70%)</title><rect x="97.1" y="213" width="43.7" height="15.0" fill="rgb(250,67,47)" rx="2" ry="2" />
<text  x="100.10" y="223.5" >__GI..</text>
</g>
<g >
<title>[libstdc++.so.6.0.30] (252,204 samples, 4.39%)</title><rect x="476.1" y="85" width="51.9" height="15.0" fill="rgb(224,214,25)" rx="2" ry="2" />
<text  x="479.13" y="95.5" >[libs..</text>
</g>
<g >
<title>dl_platform_init (76,268 samples, 1.33%)</title><rect x="1137.4" y="165" width="15.6" height="15.0" fill="rgb(217,141,0)" rx="2" ry="2" />
<text  x="1140.37" y="175.5" ></text>
</g>
<g >
<title>handle_intel (76,268 samples, 1.33%)</title><rect x="1137.4" y="117" width="15.6" height="15.0" fill="rgb(253,207,53)" rx="2" ry="2" />
<text  x="1140.37" y="127.5" ></text>
</g>
<g >
<title>__GI_fwrite (71,330 samples, 1.24%)</title><rect x="528.0" y="85" width="14.6" height="15.0" fill="rgb(247,55,49)" rx="2" ry="2" />
<text  x="530.96" y="95.5" ></text>
</g>
<g >
<title>_dl_lookup_symbol_x (1,698,829 samples, 29.58%)</title><rect x="788.3" y="85" width="349.1" height="15.0" fill="rgb(252,46,17)" rx="2" ry="2" />
<text  x="791.28" y="95.5" >_dl_lookup_symbol_x</text>
</g>
<g >
<title>__libc_start_call_main (2,815,522 samples, 49.03%)</title><rect x="174.6" y="197" width="578.6" height="15.0" fill="rgb(206,156,1)" rx="2" ry="2" />
<text  x="177.60" y="207.5" >__libc_start_call_main</text>
</g>
<g >
<title>Bcqf_ec::remove (834,858 samples, 14.54%)</title><rect x="371.1" y="149" width="171.5" height="15.0" fill="rgb(227,189,10)" rx="2" ry="2" />
<text  x="374.06" y="159.5" >Bcqf_ec::remove</text>
</g>
<g >
<title>std::ostream::sentry::sentry (63,751 samples, 1.11%)</title><rect x="687.2" y="69" width="13.1" height="15.0" fill="rgb(236,220,28)" rx="2" ry="2" />
<text  x="690.18" y="79.5" ></text>
</g>
<g >
<title>Rsqf::get_runstart (308,291 samples, 5.37%)</title><rect x="307.7" y="133" width="63.4" height="15.0" fill="rgb(250,149,23)" rx="2" ry="2" />
<text  x="310.71" y="143.5" >Rsqf::..</text>
</g>
<g >
<title>openaux (140,766 samples, 2.45%)</title><rect x="759.4" y="117" width="28.9" height="15.0" fill="rgb(229,119,6)" rx="2" ry="2" />
<text  x="762.35" y="127.5" >op..</text>
</g>
<g >
<title>std::ostream::operator&lt;&lt; (421,627 samples, 7.34%)</title><rect x="456.0" y="133" width="86.6" height="15.0" fill="rgb(232,137,27)" rx="2" ry="2" />
<text  x="458.98" y="143.5" >std::ostre..</text>
</g>
<g >
<title>std::ostream::put (103,230 samples, 1.80%)</title><rect x="700.3" y="117" width="21.2" height="15.0" fill="rgb(219,133,42)" rx="2" ry="2" />
<text  x="703.28" y="127.5" ></text>
</g>
<g >
<title>test_one_cqf (2,815,522 samples, 49.03%)</title><rect x="174.6" y="165" width="578.6" height="15.0" fill="rgb(221,43,48)" rx="2" ry="2" />
<text  x="177.60" y="175.5" >test_one_cqf</text>
</g>
<g >
<title>_dl_relocate_object (1,698,829 samples, 29.58%)</title><rect x="788.3" y="149" width="349.1" height="15.0" fill="rgb(254,149,48)" rx="2" ry="2" />
<text  x="791.28" y="159.5" >_dl_relocate_object</text>
</g>
<g >
<title>cqf_test (5,742,440 samples, 100.00%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(238,25,28)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >cqf_test</text>
</g>
<g >
<title>__GI_fwrite (178,270 samples, 3.10%)</title><rect x="218.3" y="69" width="36.6" height="15.0" fill="rgb(236,192,15)" rx="2" ry="2" />
<text  x="221.29" y="79.5" >__G..</text>
</g>
<g >
<title>std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; &gt; (142,917 samples, 2.49%)</title><rect x="385.0" y="117" width="29.4" height="15.0" fill="rgb(214,64,11)" rx="2" ry="2" />
<text  x="387.99" y="127.5" >st..</text>
</g>
<g >
<title>_dl_catch_exception (140,766 samples, 2.45%)</title><rect x="759.4" y="133" width="28.9" height="15.0" fill="rgb(210,104,46)" rx="2" ry="2" />
<text  x="762.35" y="143.5" >_d..</text>
</g>
<g >
<title>[unknown] (710,814 samples, 12.38%)</title><rect x="27.7" y="229" width="146.1" height="15.0" fill="rgb(226,192,54)" rx="2" ry="2" />
<text  x="30.75" y="239.5" >[unknown]</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms_rtm (71,330 samples, 1.24%)</title><rect x="528.0" y="53" width="14.6" height="15.0" fill="rgb(251,22,2)" rx="2" ry="2" />
<text  x="530.96" y="63.5" ></text>
</g>
<g >
<title>__GI__IO_file_xsputn (67,798 samples, 1.18%)</title><rect x="371.1" y="69" width="13.9" height="15.0" fill="rgb(243,54,52)" rx="2" ry="2" />
<text  x="374.06" y="79.5" ></text>
</g>
<g >
<title>__GI__IO_do_write (103,230 samples, 1.80%)</title><rect x="700.3" y="85" width="21.2" height="15.0" fill="rgb(241,112,52)" rx="2" ry="2" />
<text  x="703.28" y="95.5" ></text>
</g>
<g >
<title>elf_dynamic_do_Rela (1,698,829 samples, 29.58%)</title><rect x="788.3" y="133" width="349.1" height="15.0" fill="rgb(217,12,48)" rx="2" ry="2" />
<text  x="791.28" y="143.5" >elf_dynamic_do_Rela</text>
</g>
<g >
<title>new_do_write (98,093 samples, 1.71%)</title><rect x="456.0" y="53" width="20.1" height="15.0" fill="rgb(236,28,39)" rx="2" ry="2" />
<text  x="458.98" y="63.5" ></text>
</g>
<g >
<title>std::endl&lt;char, std::char_traits&lt;char&gt; &gt; (103,230 samples, 1.80%)</title><rect x="700.3" y="133" width="21.2" height="15.0" fill="rgb(219,36,19)" rx="2" ry="2" />
<text  x="703.28" y="143.5" ></text>
</g>
<g >
<title>std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (142,917 samples, 2.49%)</title><rect x="385.0" y="101" width="29.4" height="15.0" fill="rgb(206,53,33)" rx="2" ry="2" />
<text  x="387.99" y="111.5" >st..</text>
</g>
<g >
<title>_dl_map_object (140,766 samples, 2.45%)</title><rect x="759.4" y="101" width="28.9" height="15.0" fill="rgb(236,89,26)" rx="2" ry="2" />
<text  x="762.35" y="111.5" >_d..</text>
</g>
<g >
<title>std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (67,798 samples, 1.18%)</title><rect x="371.1" y="101" width="13.9" height="15.0" fill="rgb(245,220,8)" rx="2" ry="2" />
<text  x="374.06" y="111.5" ></text>
</g>
<g >
<title>std::flush&lt;char, std::char_traits&lt;char&gt; &gt; (63,751 samples, 1.11%)</title><rect x="687.2" y="101" width="13.1" height="15.0" fill="rgb(213,199,13)" rx="2" ry="2" />
<text  x="690.18" y="111.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (323,534 samples, 5.63%)</title><rect x="476.1" y="101" width="66.5" height="15.0" fill="rgb(231,105,6)" rx="2" ry="2" />
<text  x="479.13" y="111.5" >std::nu..</text>
</g>
<g >
<title>[unknown] (178,270 samples, 3.10%)</title><rect x="218.3" y="85" width="36.6" height="15.0" fill="rgb(220,10,41)" rx="2" ry="2" />
<text  x="221.29" y="95.5" >[un..</text>
</g>
<g >
<title>_IO_new_file_write (98,093 samples, 1.71%)</title><rect x="456.0" y="37" width="20.1" height="15.0" fill="rgb(217,66,17)" rx="2" ry="2" />
<text  x="458.98" y="47.5" ></text>
</g>
<g >
<title>__GI_fwrite (67,798 samples, 1.18%)</title><rect x="371.1" y="85" width="13.9" height="15.0" fill="rgb(236,128,17)" rx="2" ry="2" />
<text  x="374.06" y="95.5" ></text>
</g>
<g >
<title>std::ostream::_M_insert&lt;unsigned long&gt; (323,534 samples, 5.63%)</title><rect x="476.1" y="117" width="66.5" height="15.0" fill="rgb(211,151,54)" rx="2" ry="2" />
<text  x="479.13" y="127.5" >std::os..</text>
</g>
<g >
<title>dl_init_cacheinfo (76,268 samples, 1.33%)</title><rect x="1137.4" y="133" width="15.6" height="15.0" fill="rgb(242,13,5)" rx="2" ry="2" />
<text  x="1140.37" y="143.5" ></text>
</g>
<g >
<title>elf_machine_rela (1,698,829 samples, 29.58%)</title><rect x="788.3" y="117" width="349.1" height="15.0" fill="rgb(254,69,10)" rx="2" ry="2" />
<text  x="791.28" y="127.5" >elf_machine_rela</text>
</g>
<g >
<title>_dl_start (1,955,933 samples, 34.06%)</title><rect x="753.2" y="213" width="401.9" height="15.0" fill="rgb(233,52,45)" rx="2" ry="2" />
<text  x="756.15" y="223.5" >_dl_start</text>
</g>
<g >
<title>std::endl&lt;char, std::char_traits&lt;char&gt; &gt; (63,751 samples, 1.11%)</title><rect x="687.2" y="117" width="13.1" height="15.0" fill="rgb(231,44,28)" rx="2" ry="2" />
<text  x="690.18" y="127.5" ></text>
</g>
<g >
<title>_IO_new_file_write (103,230 samples, 1.80%)</title><rect x="700.3" y="53" width="21.2" height="15.0" fill="rgb(237,224,43)" rx="2" ry="2" />
<text  x="703.28" y="63.5" ></text>
</g>
<g >
<title>resolve_map (1,698,829 samples, 29.58%)</title><rect x="788.3" y="101" width="349.1" height="15.0" fill="rgb(249,205,32)" rx="2" ry="2" />
<text  x="791.28" y="111.5" >resolve_map</text>
</g>
<g >
<title>_init (122,497 samples, 2.13%)</title><rect x="591.4" y="117" width="25.2" height="15.0" fill="rgb(248,19,45)" rx="2" ry="2" />
<text  x="594.43" y="127.5" >_..</text>
</g>
<g >
<title>_dl_sysdep_start (1,946,027 samples, 33.89%)</title><rect x="753.2" y="181" width="399.8" height="15.0" fill="rgb(235,9,22)" rx="2" ry="2" />
<text  x="756.15" y="191.5" >_dl_sysdep_start</text>
</g>
<g >
<title>std::ostream::flush (63,751 samples, 1.11%)</title><rect x="687.2" y="85" width="13.1" height="15.0" fill="rgb(233,222,19)" rx="2" ry="2" />
<text  x="690.18" y="95.5" ></text>
</g>
<g >
<title>_dl_start_final (1,946,027 samples, 33.89%)</title><rect x="753.2" y="197" width="399.8" height="15.0" fill="rgb(225,106,4)" rx="2" ry="2" />
<text  x="756.15" y="207.5" >_dl_start_final</text>
</g>
<g >
<title>__libc_start_main_alias_2 (2,815,522 samples, 49.03%)</title><rect x="174.6" y="213" width="578.6" height="15.0" fill="rgb(205,184,4)" rx="2" ry="2" />
<text  x="177.60" y="223.5" >__libc_start_main_alias_2</text>
</g>
<g >
<title>std::ostream::sentry::sentry (63,891 samples, 1.11%)</title><rect x="674.1" y="101" width="13.1" height="15.0" fill="rgb(224,10,5)" rx="2" ry="2" />
<text  x="677.05" y="111.5" ></text>
</g>
<g >
<title>__GI___tunables_init (30,164 samples, 0.53%)</title><rect x="753.2" y="165" width="6.2" height="15.0" fill="rgb(240,99,15)" rx="2" ry="2" />
<text  x="756.15" y="175.5" ></text>
</g>
<g >
<title>std::ostream::put (98,093 samples, 1.71%)</title><rect x="456.0" y="101" width="20.1" height="15.0" fill="rgb(214,12,0)" rx="2" ry="2" />
<text  x="458.98" y="111.5" ></text>
</g>
<g >
<title>Bcqf_ec::insert (956,082 samples, 16.65%)</title><rect x="174.6" y="149" width="196.5" height="15.0" fill="rgb(244,130,28)" rx="2" ry="2" />
<text  x="177.60" y="159.5" >Bcqf_ec::insert</text>
</g>
<g >
<title>Rsqf::first_unshiftable_slot (67,798 samples, 1.18%)</title><rect x="371.1" y="133" width="13.9" height="15.0" fill="rgb(247,129,3)" rx="2" ry="2" />
<text  x="374.06" y="143.5" ></text>
</g>
<g >
<title>__GI__IO_file_xsputn (86,366 samples, 1.50%)</title><rect x="10.0" y="213" width="17.7" height="15.0" fill="rgb(240,47,45)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>__GI__IO_do_write (98,093 samples, 1.71%)</title><rect x="456.0" y="69" width="20.1" height="15.0" fill="rgb(213,63,43)" rx="2" ry="2" />
<text  x="458.98" y="79.5" ></text>
</g>
<g >
<title>std::ostream::_M_insert&lt;unsigned long&gt; (435,159 samples, 7.58%)</title><rect x="218.3" y="101" width="89.4" height="15.0" fill="rgb(230,224,18)" rx="2" ry="2" />
<text  x="221.29" y="111.5" >std::ostre..</text>
</g>
<g >
<title>__GI__IO_file_xsputn (82,321 samples, 1.43%)</title><rect x="439.1" y="85" width="16.9" height="15.0" fill="rgb(241,128,49)" rx="2" ry="2" />
<text  x="442.06" y="95.5" ></text>
</g>
<g >
<title>get_bits (120,195 samples, 2.09%)</title><rect x="414.4" y="117" width="24.7" height="15.0" fill="rgb(222,190,17)" rx="2" ry="2" />
<text  x="417.36" y="127.5" >g..</text>
</g>
<g >
<title>__mempcpy_avx_unaligned_erms_rtm (67,798 samples, 1.18%)</title><rect x="371.1" y="53" width="13.9" height="15.0" fill="rgb(209,179,21)" rx="2" ry="2" />
<text  x="374.06" y="63.5" ></text>
</g>
<g >
<title>std::endl&lt;char, std::char_traits&lt;char&gt; &gt; (212,632 samples, 3.70%)</title><rect x="174.6" y="101" width="43.7" height="15.0" fill="rgb(250,16,3)" rx="2" ry="2" />
<text  x="177.60" y="111.5" >std:..</text>
</g>
<g >
<title>std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (82,321 samples, 1.43%)</title><rect x="439.1" y="117" width="16.9" height="15.0" fill="rgb(235,89,39)" rx="2" ry="2" />
<text  x="442.06" y="127.5" ></text>
</g>
<g >
<title>_start (4,775,295 samples, 83.16%)</title><rect x="173.8" y="229" width="981.3" height="15.0" fill="rgb(223,120,12)" rx="2" ry="2" />
<text  x="176.81" y="239.5" >_start</text>
</g>
<g >
<title>mask_right (308,291 samples, 5.37%)</title><rect x="307.7" y="101" width="63.4" height="15.0" fill="rgb(252,1,9)" rx="2" ry="2" />
<text  x="310.71" y="111.5" >mask_r..</text>
</g>
<g >
<title>std::ostream::operator&lt;&lt; (647,791 samples, 11.28%)</title><rect x="174.6" y="117" width="133.1" height="15.0" fill="rgb(224,220,31)" rx="2" ry="2" />
<text  x="177.60" y="127.5" >std::ostream::op..</text>
</g>
<g >
<title>Rsqf::shift_right_and_rem_circ (120,195 samples, 2.09%)</title><rect x="414.4" y="133" width="24.7" height="15.0" fill="rgb(232,104,1)" rx="2" ry="2" />
<text  x="417.36" y="143.5" >R..</text>
</g>
<g >
<title>__GI__IO_file_xsputn (71,330 samples, 1.24%)</title><rect x="528.0" y="69" width="14.6" height="15.0" fill="rgb(235,211,16)" rx="2" ry="2" />
<text  x="530.96" y="79.5" ></text>
</g>
<g >
<title>std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; &gt; (67,798 samples, 1.18%)</title><rect x="371.1" y="117" width="13.9" height="15.0" fill="rgb(235,160,36)" rx="2" ry="2" />
<text  x="374.06" y="127.5" ></text>
</g>
<g >
<title>std::endl&lt;char, std::char_traits&lt;char&gt; &gt; (98,093 samples, 1.71%)</title><rect x="456.0" y="117" width="20.1" height="15.0" fill="rgb(216,58,42)" rx="2" ry="2" />
<text  x="458.98" y="127.5" ></text>
</g>
<g >
<title>std::ostream::operator&lt;&lt; (63,751 samples, 1.11%)</title><rect x="687.2" y="133" width="13.1" height="15.0" fill="rgb(212,44,0)" rx="2" ry="2" />
<text  x="690.18" y="143.5" ></text>
</g>
<g >
<title>init_cpu_features (76,268 samples, 1.33%)</title><rect x="1137.4" y="149" width="15.6" height="15.0" fill="rgb(208,185,21)" rx="2" ry="2" />
<text  x="1140.37" y="159.5" ></text>
</g>
<g >
<title>std::ostream::put (160,702 samples, 2.80%)</title><rect x="140.8" y="213" width="33.0" height="15.0" fill="rgb(253,25,54)" rx="2" ry="2" />
<text  x="143.79" y="223.5" >st..</text>
</g>
<g >
<title>intel_check_word (76,268 samples, 1.33%)</title><rect x="1137.4" y="101" width="15.6" height="15.0" fill="rgb(214,47,39)" rx="2" ry="2" />
<text  x="1140.37" y="111.5" ></text>
</g>
<g >
<title>std::flush&lt;char, std::char_traits&lt;char&gt; &gt; (212,632 samples, 3.70%)</title><rect x="174.6" y="85" width="43.7" height="15.0" fill="rgb(205,85,40)" rx="2" ry="2" />
<text  x="177.60" y="95.5" >std:..</text>
</g>
<g >
<title>std::ostream::_M_insert&lt;unsigned long&gt; (154,087 samples, 2.68%)</title><rect x="721.5" y="133" width="31.7" height="15.0" fill="rgb(223,81,9)" rx="2" ry="2" />
<text  x="724.49" y="143.5" >st..</text>
</g>
<g >
<title>Rsqf::shift_bits_right_metadata (142,917 samples, 2.49%)</title><rect x="385.0" y="133" width="29.4" height="15.0" fill="rgb(230,17,28)" rx="2" ry="2" />
<text  x="387.99" y="143.5" >Rs..</text>
</g>
</g>
</svg>
